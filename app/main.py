import requests
import schedule
import time
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, Any

from app.config import Config
from app.utils import get_skorozvon_token, send_to_telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_calls_report(access_token: str, start_time: int, end_time: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–≤–æ–Ω–∫–∞—Ö –∏–∑ Skorozvon"""
    report_url = f"{Config.SKOROZVON_API_URL}/api/reports/calls_total.json"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    report_payload = {
        "start_time": start_time,
        "end_time": end_time,
        "length": 1000,
        "page": 1,
        "filter": {
            "types": "all",
            "users_ids": "all",
            "scenarios_ids": "all",
            "results_ids": "all"
        }
    }
    
    try:
        response = requests.post(report_url, json=report_payload, headers=headers, timeout=30)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def calculate_operator_stats(report_data: Dict[str, Any]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º"""
    operator_stats = defaultdict(lambda: {
        'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        'total_calls': 0,
        'successful_calls': 0,
        'total_duration': 0,
        'call_types': defaultdict(int)
    })
    
    if not report_data or 'data' not in report_data:
        return operator_stats
    
    for call in report_data['data']:
        user_info = call.get('user', {})
        user_id = user_info.get('id')
        user_name = user_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if not user_id:
            continue
            
        operator = operator_stats[user_id]
        operator['name'] = user_name
        operator['total_calls'] += 1
        operator['total_duration'] += call.get('duration', 0)
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        result_group = call.get('scenario_result_group', {})
        if result_group and '–£—Å–ø–µ—à–Ω' in result_group.get('title', ''):
            operator['successful_calls'] += 1
        
        # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –∑–≤–æ–Ω–∫–æ–≤
        call_type = call.get('call_type_code', 'unknown')
        operator['call_types'][call_type] += 1
    
    return operator_stats

def format_stats_message(operator_stats: Dict[str, Any], date_period: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
    if not operator_stats:
        return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    
    message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ {date_period}</b>\n\n"
    
    for user_id, stats in operator_stats.items():
        if stats['total_calls'] == 0:
            continue
            
        avg_duration = stats['total_duration'] / stats['total_calls']
        success_rate = (stats['successful_calls'] / stats['total_calls'] * 100) if stats['total_calls'] > 0 else 0
        
        message += f"üë§ <b>{stats['name']}</b>:\n"
        message += f"   ‚Ä¢ üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {stats['total_calls']}\n"
        message += f"   ‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_calls']} ({success_rate:.1f}%)\n"
        message += f"   ‚Ä¢ ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']//60} –º–∏–Ω.\n"
        message += f"   ‚Ä¢ üïê –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_duration:.1f} —Å–µ–∫.\n"
        message += f"   ‚Ä¢ üîÑ –ò—Å—Ö–æ–¥—è—â–∏–µ: {stats['call_types'].get('outgoing', 0)}\n"
        message += f"   ‚Ä¢ üì• –í—Ö–æ–¥—è—â–∏–µ: {stats['call_types'].get('incoming', 0)}\n\n"
    
    return message

def generate_daily_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    access_token = get_skorozvon_token()
    if not access_token:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    today = datetime.now()
    yesterday = today - timedelta(days=1)
    start_time = int(yesterday.replace(hour=0, minute=0, second=0).timestamp())
    end_time = int(yesterday.replace(hour=23, minute=59, second=59).timestamp())
    date_str = yesterday.strftime("%d.%m.%Y")
    
    logger.info(f"üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {date_str}...")
    report_data = get_calls_report(access_token, start_time, end_time)
    
    if not report_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞")
        return
    
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(report_data.get('data', []))} –∑–∞–ø–∏—Å–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    operator_stats = calculate_operator_stats(report_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = format_stats_message(operator_stats, date_str)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if send_to_telegram(message):
        logger.info("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Skorozvon Telegram Bot –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    schedule.every().day.at(Config.REPORT_TIME).do(generate_daily_report)
    
    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∞
    generate_daily_report()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    main()
